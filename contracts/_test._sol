//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "hardhat/console.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "./ISplitMain.sol";
import "./IAsksCore.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol";
import "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol";
import "@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";

import {
    ReentrancyGuard
} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract SporesMinter is ReentrancyGuard, AdminControl, ICreatorExtensionTokenURI {
    // can change by admin
    address private SPORES_DAO_ADDRESS;

    uint32 public constant PERCENTAGE_SCALE = 1e6;

    address private splitsMain;
    address private sporesRemixManifold;
    address private asksCore;

    mapping(uint256=>string) private _tokenURIs;
    uint32 [4] private _splitAmounts;

    event NewRemixMinted(uint256 tokenId, address artist, address collector, address remixer, address splitsAddress);

    constructor() ICreatorExtensionTokenURI() {
        // Load up the various contracts this works w/
        splitsMain = address(0x2ed6c4B5dA6378c7897AC67Ba9e43102Feb694EE);
        sporesRemixManifold = address(0x9efe0C372310E179104AA5F478e20355a2538e43);
        asksCore = address(0xA98D3729265C88c5b3f861a0c501622750fF4806);
        SPORES_DAO_ADDRESS = address(0x3e2e9604AE811e29b8Fa22B12F67f79eb67D17bA);
    }

    function mintSongTest(
        address[] calldata Accounts,
        uint32[] calldata SplitAmounts
        ) 
    public  returns (address)  {
        return ISplitMain(address(0x2ed6c4B5dA6378c7897AC67Ba9e43102Feb694EE)).createSplit(
            Accounts, SplitAmounts, 2*PERCENTAGE_SCALE, address(0));
    }

    function mintSong(
        address[] calldata accounts,
        uint32[] calldata splitAmounts
        /*
        address sourceTokenContract, // address of contract containing the NFT being remixed
        uint256 sourceTokenId, // the tokenId of the NFT being remixed
        address remixerAddress, // wallet address of person who remixed the track
        string calldata remixTokenURI, // the tokenURI containing the remixed track
        */
        //uint256 askPrice, // price to be sold for
        //uint16 findersFeeBps,
//        uint32 DISTRIBUTER_FEE
        ) 
    public  returns (address)  {
        // Todo: break into 2 sepearte functions if theres an existing split that we wanna use directly
        /*
        address collectorAddress = address(0xBB416E0da90df72C17Af5E0a7782367f7ED2f425); //IERC721(sourceTokenContract).ownerOf(sourceTokenId);
        address[] memory accounts = new address[](4);
        accounts[0] = SPORES_DAO_ADDRESS; 
        accounts[1] = collectorAddress; 
        accounts[2] = remixerAddress;  
        accounts[3] = msg.sender; 

        uint32[] memory splitAmounts = new uint32[](4);
        splitAmounts[0] = _splitAmounts[0];
        splitAmounts[1] = _splitAmounts[1];
        splitAmounts[2] = _splitAmounts[2];
        splitAmounts[3] = _splitAmounts[3]; 
        */

        address songSplitsAddress = ISplitMain(address(0x2ed6c4B5dA6378c7897AC67Ba9e43102Feb694EE)).createSplit(
            accounts, splitAmounts, 2*PERCENTAGE_SCALE, address(0));

        // mint to manifold
        //uint256 tokenId = IERC721CreatorCore(sporesRemixManifold).mintExtension(msg.sender, "");

        // store the
        //setTokenURI(tokenId, remixTokenURI);
        
/*

        // In order for this createAsk to work, we need to do a few approvals (outside of this contract)
        // 1. This contract must be an approved operator for the manifold remix contract.
        // 2. Need to approve the zora asks module for moving tokens
        IAsksCore(asksCore).createAsk(
            sporesRemixManifold,
            tokenId,
            askPrice,
            address(0),
            songSplitsAddress,
            findersFeeBps
        );  

        // Thought/notes/todos: set royalties on manifold using the splits address
        // sidenote: since the minter doesn't have admin access to manifold contract, there needs to be a way
        // to adjust "their" royalties % later on. Probably need a function for that
        // though note that the royalty percentage they specify will take out the split from ther
        // 
        */
        
        return songSplitsAddress    ;
    }

    function setSplitAmounts(
        uint32 daoAmount,
        uint32 collectorAmount, 
        uint32 remixerAmount, 
        uint32 artistAmount) onlyOwner public   {
        // TODO: only allow contract owner/spores dao to do this
        _splitAmounts[0] = daoAmount*PERCENTAGE_SCALE;
        _splitAmounts[1] = collectorAmount*PERCENTAGE_SCALE;
        _splitAmounts[2] = remixerAmount*PERCENTAGE_SCALE;
        _splitAmounts[3] = artistAmount*PERCENTAGE_SCALE;
    }
 

    function setSporesDAOAddress(address spores) onlyOwner public {
        SPORES_DAO_ADDRESS = spores;
    }

    function tokenURI(address creator, uint256 tokenId)  external view override returns (string memory) {
        return _tokenURIs[tokenId];
    }

    function setTokenURI( uint256 tokenId, string calldata remixTokenURI) public  {
        _tokenURIs[tokenId] = remixTokenURI;
    }

    function supportsInterface(bytes4 interfaceId) public view virtual override(AdminControl, IERC165) returns (bool) {
        return 
            interfaceId == type(IERC721CreatorCore).interfaceId || 
            interfaceId == type(ICreatorExtensionTokenURI).interfaceId || 
            AdminControl.supportsInterface(interfaceId) || 
            super.supportsInterface(interfaceId);
    }
}
